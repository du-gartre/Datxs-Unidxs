

# 02 Análisis de la distribución de mujeres según ingreso




#****************************************************************************
# 1. Activar librerías ------------------------------------------------------
#****************************************************************************

library(tidyverse)
library(hrbrthemes)
library(tidyselect)
library(reshape2)
library(plotly)adsfads


#*****************************************************************************
# 2. Importar datos ----------------------------------------------------------
#*****************************************************************************

# Base de sueldos de servidores públicos para agosto de 2021
df_agosto_sex <- read.csv(file = "./data/base_clasificada.csv", 
                          encoding = "UTF-8", row.names = "X")


#****************************************************************************
# 3. Manipulación de la base de datos -------------------------------------------
#****************************************************************************


# Creamos categorías de ingreso
# las categorías van de rangos de 10k en 10k 
df_agosto_sex2 <- df_agosto_sex %>% 
    mutate(niv_sueldo = case_when((between(SUELDO_TABULAR_BRUTO, 0, 10e3)) ~ 1,
                                  (between(SUELDO_TABULAR_BRUTO, 10e3, 20e3)) ~ 2,
                                  (between(SUELDO_TABULAR_BRUTO, 20e3, 30e3)) ~ 3,
                                  (between(SUELDO_TABULAR_BRUTO, 30e3, 40e3)) ~ 4,
                                  (between(SUELDO_TABULAR_BRUTO, 40e3, 50e3)) ~ 5,
                                  (between(SUELDO_TABULAR_BRUTO, 50e3, 60e3)) ~ 6,
                                  (between(SUELDO_TABULAR_BRUTO, 60e3, 70e3)) ~ 7,
                                  (between(SUELDO_TABULAR_BRUTO, 70e3, 80e3)) ~ 8,
                                  (between(SUELDO_TABULAR_BRUTO, 80e3, 90e3)) ~ 9,
                                  (between(SUELDO_TABULAR_BRUTO, 90e3, 100e3)) ~ 10,
                                  (between(SUELDO_TABULAR_BRUTO, 100e3, 120e3)) ~ 11)
           )


# Número de servidores públicos por nivel salarial
table(df_agosto_sex2$niv_sueldo)

# Proporción del total de servidores públicos por nivel de sueldo
prop.table(table(df_agosto_sex2$niv_sueldo))*100

# Para saber el número de Hombres y mujeres en cada nivel de ingreso
df_clasif <- df_agosto_sex2 %>% 
    group_by(sex, niv_sueldo) %>% 
    summarise(n()) %>% 
    as.data.frame()

# Base con personal por institución, clasificaco por hombres, mujeres y NA
df_wide <- spread(data = df_clasif, 
                  key = "sex" ,
                  value = "n()") %>% 
    replace(is.na(.), 0) %>% 
    mutate(total = rowSums(across(where(is.numeric))))

# Tabla con el porcentaje de hombres, mujeres y no_id por nivel de sueldo
df_perc_sex <- df_wide %>% 
    mutate(p_mujeres = M/total,
           p_hombres = H/total,
           p_no_id = `<NA>`/total)


# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id 
# por nivel de sueldo
df_niv_sex_long <- melt(data = df_niv_sex, id.vars = "niv_sueldo") %>% 
    filter(variable != "total")

# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id 
# por nivel de sueldo
df_perc_sex_long <- melt(data = df_perc_sex, id.vars = "niv_sueldo") %>% 
    filter(variable != "p_total")


df_hh <- df_agosto_sex2 %>% 
    filter(sex== "H") %>% 
    select(sueldo = SUELDO_TABULAR_BRUTO)

df_mm <- df_agosto_sex2 %>% 
    filter(sex== "M") %>% 
    select(sueldo = SUELDO_TABULAR_BRUTO)


# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id 
# por nivel de sueldo
df_niv_sex_long <- melt(data = df_agosto_sex2, id.vars = "niv_sueldo") %>% 
    filter(variable != "total")


#****************************************************************************
# 4. Visualizaciones ---------------------------------------------------------
#****************************************************************************


#****************************************************************************
#* Gráficos de barras
#****************************************************************************

df_perc_sex_long$variable <- factor(x = df_perc_sex_long$variable, 
                                    levels = c("p_no_id", "p_mujeres", "p_hombres"))

# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
plt_prop <- df_perc_sex_long %>% 
    ggplot(aes(y = value, x = niv_sueldo, fill = variable)) +
    geom_bar(position = "fill", stat = "identity")

# Para volverla interactiva
ggplotly(plt_prop)

# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
df_niv_sex_long %>% 
    ggplot(aes(y = niv_sueldo, x = value, fill = variable)) +
    geom_bar(position = "fill", stat = "identity")

# Gráfica con la CANTIDAD de mujeres, hombres y no_id, por nivel de sueldo
plt_niv <- df_niv_sex_long %>% 
    ggplot(aes(y = niv_sueldo, x = value, fill = variable)) +
    geom_bar(position = "stack", stat = "identity")



# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
df_perc_sex_long %>% 
    ggplot(aes(y = value, x = niv_sueldo, fill = variable)) +
    geom_bar(position = "dodge", stat = "identity")

# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
df_niv_sex_long %>% 
    ggplot(aes(y = value, x = niv_sueldo, fill = variable)) +
    geom_col(position = "dodge")


#****************************************************************************
#* Histogramas
#****************************************************************************

df_aa %>% 
    filter(!is.na(sex)) %>% 
    ggplot(aes(x = sueldo, fill = sex)) + 
    geom_density()


df_aa %>% 
    filter(!is.na(sex)) %>% 
    ggplot(aes(x = sueldo, fill = sex)) + 
    geom_histogram(position = "dodge")

ggplot()+
    geom_histogram(data = df_mm, aes(x = sueldo, y = ..density..), fill = "green", color = "gray") + 
    geom_histogram(data = df_hh, aes(x = sueldo, y = -..density..), fill = "blue", color = "gray") +
    coord_flip()

ggplot()+
    geom_density(data = df_mm, aes(x = sueldo, y = ..density..), fill = "green", color = "gray") + 
    geom_density(data = df_hh, aes(x = sueldo, y = -..density..), fill = "blue", color = "gray") + 
    coord_flip()


