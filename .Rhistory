sort(table(df_agosto_sex$DESC_UNIDAD_RESPONSABLE))
sum(!is.na(df_agosto_sex$sex))
#****************************************************************************
# 3. Manipulación de la base de datos -------------------------------------------
#****************************************************************************
# Creamos categorías de ingreso
# las categorías van de rangos de 10k en 10k
df_agosto_sex2 <- df_agosto_sex %>%
mutate(niv_sueldo = case_when((between(SUELDO_TABULAR_BRUTO, 0, 10e3)) ~ 1,
(between(SUELDO_TABULAR_BRUTO, 10e3, 20e3)) ~ 2,
(between(SUELDO_TABULAR_BRUTO, 20e3, 30e3)) ~ 3,
(between(SUELDO_TABULAR_BRUTO, 30e3, 40e3)) ~ 4,
(between(SUELDO_TABULAR_BRUTO, 40e3, 50e3)) ~ 5,
(between(SUELDO_TABULAR_BRUTO, 50e3, 60e3)) ~ 6,
(between(SUELDO_TABULAR_BRUTO, 60e3, 70e3)) ~ 7,
(between(SUELDO_TABULAR_BRUTO, 70e3, 80e3)) ~ 8,
(between(SUELDO_TABULAR_BRUTO, 80e3, 90e3)) ~ 9,
(between(SUELDO_TABULAR_BRUTO, 90e3, 100e3)) ~ 10,
(between(SUELDO_TABULAR_BRUTO, 100e3, 120e3)) ~ 11)
)
# Número de servidores públicos por nivel salarial
table(df_agosto_sex2$niv_sueldo)
# Proporción del total de servidores públicos por nivel de sueldo
prop.table(table(df_agosto_sex2$niv_sueldo))*100
# Para saber el número de Hombres y mujeres en cada nivel de ingreso
df_clasif <- df_agosto_sex2 %>%
group_by(sex, niv_sueldo) %>%
summarise(n()) %>%
as.data.frame()
# Dataframe del número de mujeres por nivel de sueldo
df_muj_niv <- df_clasif %>%
filter(sex == "M") %>%
select(niv_sueldo, mujeres = "n()")
# Dataframe del número de hombres por nivel de sueldo
df_hom_niv <- df_clasif %>%
filter(sex == "H")%>%
select(niv_sueldo, hombres = "n()")
# Dataframe del número de personas no clasificadas por nivel de sueldo
df_unisex_niv <- df_clasif %>%
filter(is.na(sex))%>%
select(niv_sueldo, no_id = "n()")
# Tabla con el número de hombres, mujeres y no_id por nivel de sueldo
df_niv_sex <- df_muj_niv %>%
merge(y = df_hom_niv, by = "niv_sueldo", all.x =TRUE) %>%
merge(y = df_unisex_niv, by = "niv_sueldo", all.x =TRUE) %>%
mutate(niv_sueldo = as.factor(niv_sueldo)) %>%
mutate(total = rowSums(across(where(is.numeric))))
# ver cuantas personas no fueron clasificadas
sum(df_niv_sex$no_id)
# Tabla con el porcentaje de hombres, mujeres y no_id por nivel de sueldo
df_perc_sex <- df_niv_sex %>%
mutate(p_mujeres = mujeres/total,
p_hombres = hombres/total,
p_no_id = no_id/total) %>%
mutate(p_total = rowSums(select(., "p_mujeres", "p_hombres", "p_no_id"))) %>%
select(niv_sueldo, p_mujeres, p_hombres, p_no_id, p_total)
# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id
# por nivel de sueldo
df_niv_sex_long <- melt(data = df_niv_sex, id.vars = "niv_sueldo") %>%
filter(variable != "total")
# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id
# por nivel de sueldo
df_perc_sex_long <- melt(data = df_perc_sex, id.vars = "niv_sueldo") %>%
filter(variable != "p_total")
df_hh <- df_agosto_sex2 %>%
filter(sex== "H") %>%
select(sueldo = SUELDO_TABULAR_BRUTO)
df_mm <- df_agosto_sex2 %>%
filter(sex== "M") %>%
select(sueldo = SUELDO_TABULAR_BRUTO)
# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id
# por nivel de sueldo
df_niv_sex_long <- melt(data = df_agosto_sex2, id.vars = "niv_sueldo") %>%
filter(variable != "total")
#****************************************************************************
# 4. Visualizaciones ---------------------------------------------------------
#****************************************************************************
#****************************************************************************
#* Gráficos de barras
#****************************************************************************
df_perc_sex_long$variable <- factor(x = df_perc_sex_long$variable,
levels = c("p_no_id", "p_mujeres", "p_hombres"))
# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
plt_prop <- df_perc_sex_long %>%
ggplot(aes(y = value, x = niv_sueldo, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
plt_prop <- df_perc_sex_long %>%
ggplot(aes(y = value, x = niv_sueldo, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
plt_prop
# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
df_niv_sex_long %>%
ggplot(aes(y = niv_sueldo, x = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
df_niv_sex_long %>%
ggplot(aes(y = value, x = niv_sueldo, fill = variable)) +
geom_col(position = "dodge")
# 02 Análisis de la distribución de mujeres según ingreso
#****************************************************************************
# 1. Activar librerías ------------------------------------------------------
#****************************************************************************
library(tidyverse)
library(hrbrthemes)
library(tidyselect)
library(reshape2)
library(plotly)
#*****************************************************************************
# 2. Importar datos ----------------------------------------------------------
#*****************************************************************************
# Base de sueldos de servidores públicos para agosto de 2021
df_agosto_sex <- read.csv(file = "./data/base_clasificada.csv",
encoding = "UTF-8", row.names = "X")
#****************************************************************************
# 3. Manipulación de la base de datos -------------------------------------------
#****************************************************************************
# Creamos categorías de ingreso
# las categorías van de rangos de 10k en 10k
# df_agosto_sex2 <- df_agosto_sex %>%
#     mutate(niv_sueldo = case_when((between(SUELDO_TABULAR_BRUTO, 0, 10e3)) ~ 1,
#                                   (between(SUELDO_TABULAR_BRUTO, 10e3, 20e3)) ~ 2,
#                                   (between(SUELDO_TABULAR_BRUTO, 20e3, 30e3)) ~ 3,
#                                   (between(SUELDO_TABULAR_BRUTO, 30e3, 40e3)) ~ 4,
#                                   (between(SUELDO_TABULAR_BRUTO, 40e3, 50e3)) ~ 5,
#                                   (between(SUELDO_TABULAR_BRUTO, 50e3, 60e3)) ~ 6,
#                                   (between(SUELDO_TABULAR_BRUTO, 60e3, 70e3)) ~ 7,
#                                   (between(SUELDO_TABULAR_BRUTO, 70e3, 80e3)) ~ 8,
#                                   (between(SUELDO_TABULAR_BRUTO, 80e3, 90e3)) ~ 9,
#                                   (between(SUELDO_TABULAR_BRUTO, 90e3, 100e3)) ~ 10,
#                                   (between(SUELDO_TABULAR_BRUTO, 100e3, 120e3)) ~ 11)
#            )
# 5 categorías
df_agosto_sex2 <- df_agosto_sex %>%
mutate(niv_sueldo = case_when((between(SUELDO_TABULAR_BRUTO, 0, 24e3)) ~ 1,
(between(SUELDO_TABULAR_BRUTO, 24e3, 48e3)) ~ 2,
(between(SUELDO_TABULAR_BRUTO, 48e3, 72e3)) ~ 3,
(between(SUELDO_TABULAR_BRUTO, 72e3, 96e3)) ~ 4,
(between(SUELDO_TABULAR_BRUTO, 96e3, 120e3)) ~ 5)
)
# table(df_agosto_sex2$niv_sueldo)
#
# # 6 categorías
# df_agosto_sex2 <- df_agosto_sex %>%
#     mutate(niv_sueldo = case_when((between(SUELDO_TABULAR_BRUTO, 0, 20e3)) ~ 1,
#                                   (between(SUELDO_TABULAR_BRUTO, 20e3, 40e3)) ~ 2,
#                                   (between(SUELDO_TABULAR_BRUTO, 40e3, 60e3)) ~ 3,
#                                   (between(SUELDO_TABULAR_BRUTO, 60e3, 80e3)) ~ 4,
#                                   (between(SUELDO_TABULAR_BRUTO, 80e3, 100e3)) ~ 5,
#                                   (between(SUELDO_TABULAR_BRUTO, 100e3, 130e3)) ~ 6)
#     )
#
# table(df_agosto_sex2$niv_sueldo)
#
# sort(unique(df_agosto_sex2$DESC_UNIDAD_RESPONSABLE))
#
# df_agosto_sex2 %>%
#     filter(DESC_UNIDAD_RESPONSABLE =="Universidad de la Salud") %>%
#     View()
# Número de servidores públicos por nivel salarial
table(df_agosto_sex2$niv_sueldo)
prop.table(table(df_agosto_sex2$sex))
# Proporción del total de servidores públicos por nivel de sueldo
prop.table(table(df_agosto_sex2$niv_sueldo))*100
# Para saber el número de Hombres y mujeres en cada nivel de ingreso
df_clasif <- df_agosto_sex2 %>%
group_by(sex, niv_sueldo) %>%
summarise(n()) %>%
as.data.frame()
# Dataframe del número de mujeres por nivel de sueldo
df_muj_niv <- df_clasif %>%
filter(sex == "M") %>%
select(niv_sueldo, mujeres = "n()")
# Dataframe del número de hombres por nivel de sueldo
df_hom_niv <- df_clasif %>%
filter(sex == "H")%>%
select(niv_sueldo, hombres = "n()")
# Dataframe del número de personas no clasificadas por nivel de sueldo
df_unisex_niv <- df_clasif %>%
filter(is.na(sex))%>%
select(niv_sueldo, no_id = "n()")
# Tabla con el número de hombres, mujeres y no_id por nivel de sueldo
df_niv_sex <- df_muj_niv %>%
merge(y = df_hom_niv, by = "niv_sueldo", all.x =TRUE) %>%
merge(y = df_unisex_niv, by = "niv_sueldo", all.x =TRUE) %>%
mutate(niv_sueldo = as.factor(niv_sueldo)) %>%
mutate(total = rowSums(across(where(is.numeric))))
# ver cuantas personas no fueron clasificadas
sum(df_niv_sex$no_id)
# Tabla con el porcentaje de hombres, mujeres y no_id por nivel de sueldo
df_perc_sex <- df_niv_sex %>%
mutate(p_mujeres = mujeres/total,
p_hombres = hombres/total,
p_no_id = no_id/total) %>%
mutate(p_total = rowSums(select(., "p_mujeres", "p_hombres", "p_no_id"))) %>%
select(niv_sueldo, p_mujeres, p_hombres, p_no_id, p_total)
# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id
# por nivel de sueldo
df_niv_sex_long <- melt(data = df_niv_sex, id.vars = "niv_sueldo") %>%
filter(variable != "total")
# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id
# por nivel de sueldo
df_perc_sex_long <- melt(data = df_perc_sex, id.vars = "niv_sueldo") %>%
filter(variable != "p_total")
# df_hh <- df_agosto_sex2 %>%
#     filter(sex== "H") %>%
#     select(sueldo = SUELDO_TABULAR_BRUTO)
#
# df_mm <- df_agosto_sex2 %>%
#     filter(sex== "M") %>%
#     select(sueldo = SUELDO_TABULAR_BRUTO)
# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id
# por nivel de sueldo
# df_niv_sex_long <- melt(data = df_agosto_sex2, id.vars = "niv_sueldo") %>%
#     filter(variable != "total")
#****************************************************************************
# 4. Visualizaciones ---------------------------------------------------------
#****************************************************************************
#****************************************************************************
#* Gráficos de barras
#****************************************************************************
df_perc_sex_long$variable <- factor(x = df_perc_sex_long$variable,
levels = c("p_no_id", "p_mujeres", "p_hombres"))
# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
plt_prop <- df_perc_sex_long %>%
ggplot(aes(y = value, x = niv_sueldo, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
plt_prop
# Gráfica con la proporción de mujeres, hombres y no_id, por nivel de sueldo
df_niv_sex_long %>%
ggplot(aes(y = niv_sueldo, x = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
# 03.1 Gráficos de deciles de ingreso
#
#'  A partir de 03, se crean gráficos de deciles de ingreso
#*****************************************************************************
# 1. Activar librerías ---------------------------------------------------------------
#*****************************************************************************
library(tidyverse)
#*****************************************************************************
# 2. Importar datos -------------------------------------------------------------
#*****************************************************************************
df_deciles <- read.csv(file = "data/df_deciles.csv", fileEncoding = "UTF-8")
#*****************************************************************************
# 3. Manipulación de datos ------------------------------------
#*****************************************************************************
# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id
# por nivel de sueldo
df_deciles_long <- melt(data = df_deciles, id.vars = "DECIL") %>%
filter(variable %in% c("H", "M")) %>%
mutate(variable = factor(variable, levels = c("M", "H")))
#*****************************************************************************
# 3. Creación de gráficos ------------------------------------
#*****************************************************************************
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = value, x = DECIL, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(position = "fill")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar()
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = value, x = DECIL, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(stat = "identity")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(stat = "identity", position = "fill")
View(df_deciles_long)
# Gráfica con la CANTIDAD de mujeres, hombres y no_id, por nivel de sueldo
plt_niv <- df_niv_sex_long %>%
ggplot(aes(y = niv_sueldo, x = value, fill = variable)) +
geom_bar(position = "stack", stat = "identity")
plt_niv
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(stat = "identity", position = "fill")
df_deciles_long
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(stat = "identity", position = "fill")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = "DECIL", x = value, fill = variable)) +
geom_bar(stat = "identity", position = "fill")
View(df_deciles_long)
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = `DECIL`, x = value, fill = variable)) +
geom_bar(stat = "identity", position = "fill")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(stat = "identity", position = "fill")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = value, x = DECIL, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
str(df_deciles_long)
# Convertimos de wide a long la tabla con el número de hombres, mujeres y no_id
# por nivel de sueldo
df_deciles_long <- melt(data = df_deciles, id.vars = "DECIL") %>%
filter(variable %in% c("H", "M")) %>%
mutate(variable = factor(variable, levels = c("M", "H"))) %>%
mutate(DECIL = as.factor(DECIL))
str(df_deciles_long)
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(stat = "identity", position = "fill")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = value, x = DECIL, fill = variable)) +
geom_bar(position = "fill", stat = "identity")
# Gráfico de barras
ggplot(data = df_deciles_long, aes(y = DECIL, x = value, fill = variable)) +
geom_bar(stat = "identity", position = "fill")
sort(table(df_agosto_sex2$DESC_UNIDAD_RESPONSABLE))
df_agosto_sex2 %>%
group_by(DESC_UNIDAD_RESPONSABLE) %>%
summarise(
n()
) %>%
View()
rm(list=ls())
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
rm(list=ls())
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(dplyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(ggplot2)
library(plotly)
df <- read.csv("tables/analysis_dif_w.csv")
df <- read.csv("R_datatón/tables/analysis_dif_w.csv")
df <- read.csv("C:/Users/52443/CIDE/Datatón - General/R_datatón/tables/analysis_dif_w.csv")
names(df)
df <- df %>% mutate(quadrant = z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4",
)
df <- df %>% mutate(quadrant = z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4"
)
df <- df %>% mutate(df$quadrant = z_score_b == 1 & cohensd_b==1 ~ "1",
df <- df %>% mutate(quadrant = z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4"
)
df <- df %>% mutate(quadrant = case_when(
z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4"
))
rm(list=ls())
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(dplyr)
library(ggplot2)
library(plotly)
df <- read.csv("C:/Users/52443/CIDE/Datatón - General/R_datatón/tables/analysis_dif_w.csv")
View(df)
View(df)
df <- read.csv("C:/Users/52443/CIDE/Datatón - General/R_datatón/tables/analysis_dif_w.csv", encoding = "UTF-8")
#envi_vivienda <-  fread("Data/ENVI/2020/TVIVIENDA.csv", encoding = "UTF-8") %>% as.data.frame() %>% rename_all(tolower)
View(df)
View(df)
names(df)
df <- df %>% mutate(quadrant = case_when(
z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4"
))
fig <- plot_ly(df, x = ~z_score, y = ~cohensd, text = ~ï..desc_unidad_responsable, type = 'scatter', mode = 'markers', color = ~quadrant, colors = 'Reds',
marker = list(size = ~tot, opacity = 0.5))
fig <- fig %>% layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
fig <- plot_ly(df, x = ~z_score, y = ~cohensd, text = ~X.U.FEFF.desc_unidad_responsable, type = 'scatter', mode = 'markers', color = ~quadrant, colors = 'Reds',
marker = list(size = ~tot, opacity = 0.5))
fig <- fig %>% layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
fig <- plot_ly(df, x = ~z_score y = ~cohensd, text = ~X.U.FEFF.desc_unidad_responsable, type = 'scatter', mode = 'markers', color = ~tot, colors = 'Reds',
fig <- plot_ly(df, x = ~z_score y = ~cohensd, text = ~X.U.FEFF.desc_unidad_responsable,
fig <- plot_ly(df, x = ~z_score, y = ~cohensd, text = ~X.U.FEFF.desc_unidad_responsable, type = 'scatter', mode = 'markers', color = ~quadrant, colors = 'Reds',
marker = list(size = ~tot, opacity = 0.5))
fig <- fig %>% layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
fig <- plot_ly(df, x = ~z_score, y = ~cohensd, text = ~X.U.FEFF.desc_unidad_responsable, type = 'scatter', mode = 'markers', color = ~quadrant, colors = 'Reds',
marker = list(size = ~tot, opacity = 0.5))
fig <- fig %>% layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
fig <- plot_ly(df, x = ~z_score, y = ~cohensd, text = ~X.U.FEFF.desc_unidad_responsable, type = 'scatter', mode = 'markers', color = ~tot, colors = 'Reds',
marker = list(size = ~tot, opacity = 0.5))
fig <- fig %>% layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
df %>%
mutate(quadrant = case_when(z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4")) %>%
ggplot(aes(x = z_score, y = cohensd, color = quadrant)) +
geom_text(aes(label=Z),
position = position_jitter(width=2, height=0.005)) +
geom_vline(xintercept = 0) + # plot vertical line
geom_hline(yintercept = 0) + # plot horizontal line
geom_point()
df %>%
mutate(quadrant = case_when(z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4")) %>%
ggplot(aes(x = z_score, y = cohensd, color = quadrant)) +
geom_vline(xintercept = 0) + # plot vertical line
geom_hline(yintercept = 0) + # plot horizontal line
geom_point()
fig1 <- df %>%
mutate(quadrant = case_when(z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4")) %>%
ggplot(aes(x = z_score, y = cohensd, color = quadrant)) +
geom_text(aes(label=X.U.FEFF.desc_unidad_responsable),
position = position_jitter(width=2, height=0.005)) +
geom_vline(xintercept = 0) + # plot vertical line
geom_hline(yintercept = 0) + # plot horizontal line
geom_point()
fig1
fig1 <- df %>%
mutate(quadrant = case_when(z_score_b == 1 & cohensd_b==1 ~ "1",
z_score_b == 0 & cohensd_b==1 ~ "2",
z_score_b == 0 & cohensd_b==0 ~ "3",
z_score_b == 1 & cohensd_b==0 ~ "4")) %>%
ggplot(aes(x = z_score, y = cohensd, color = quadrant)) +
#geom_text(aes(label=X.U.FEFF.desc_unidad_responsable),
#position = position_jitter(width=2, height=0.005)) +
geom_vline(xintercept = 0) + # plot vertical line
geom_hline(yintercept = 0) + # plot horizontal line
geom_point()
fig1
# Importamos librerías ----------------------------------------------------
library(tidyverse)
library(stratification)
# Importamos datos --------------------------------------------------------
# Base de Índice de Rezago social 2020 del CONEVAL a nivel municipal
df_IRS <- read.csv(file = "data-raw/IRS_municipios_2020.csv")
# Proceso de estratificación ----------------------------------------------
# Nos quedamos primero solo con datos de CDMX
df_IRS_cdmx <- df_IRS %>%
filter(Entidad.federativa == "Ciudad de México") %>%
arrange(Índice.de.rezago.social) %>%
# ordenamos y pasamos los números a positivo
# porque strata.cumrootf no puede estratificar números negativos
mutate(Índice.de.rezago.social = -Índice.de.rezago.social)
# Estratificamos por medio del método de Dalenius y Hodges para minimizar
# la varianza
# pág 9
# http://gaia.inegi.org.mx/scince2/documentos/scince/metodo_notaTecnica.pdf
l_strata <- strata.cumrootf(x = df_IRS_cdmx$Índice.de.rezago.social,
n = 16,
Ls =2)
# Creamos una nueva columna con los estratos
df_IRS_cdmx$estrato <- sl_strata$stratumID
# Creamos una nueva columna con los estratos
df_IRS_cdmx$estrato <- l_strata$stratumID
View(df_IRS_cdmx)
df_IRS_cdmx %>%
select(Municipio, estrato, Índice.de.rezago.social) %>%
View()
# Estratificamos por medio del método de Dalenius y Hodges para minimizar
# la varianza
# pág 9
# http://gaia.inegi.org.mx/scince2/documentos/scince/metodo_notaTecnica.pdf
l_strata <- strata.cumrootf(x = df_IRS_cdmx$Índice.de.rezago.social,
n = 16,
Ls =2) # dos estratos
# Creamos una nueva columna con los estratos
df_IRS_cdmx$estrato <- l_strata$stratumID
# Estratificamos por medio del método de Dalenius y Hodges para minimizar
# la varianza
# pág 9
# http://gaia.inegi.org.mx/scince2/documentos/scince/metodo_notaTecnica.pdf
l_strata <- strata.cumrootf(x = df_IRS_cdmx$Índice.de.rezago.social,
n = 16,
Ls =2) # dos estratos
# Creamos una nueva columna con los estratos
df_IRS_cdmx$estrato <- l_strata$stratumID
View(df_IRS_cdmx)
df_IRS_cdmx %>%
select(Municipio, estrato, Índice.de.rezago.social) %>%
View()
# Guardamos datos ---------------------------------------------------
write.csv(x = df_IRS_cdmx, file = "data/IRS_CDMX_strata.csv")
